import { Client, Account } from "node-appwrite";
/**
 * üîí Auth Checker Middleware
 * Ki·ªÉm tra cookie ch·ª©a token h·ª£p l·ªá hay kh√¥ng
 */

export default async (req, res, next) => {
    const authHeader = req.headers.authorization;
  console.log("authHeader:  ", authHeader)
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(401).json({ message: 'Authorization header kh√¥ng h·ª£p l·ªá.' });
    }

    const token = authHeader.split(' ')[1];

    try {
        // Kh·ªüi t·∫°o Appwrite Client ph√≠a server
        const client = new Client()
            .setEndpoint(process.env.APPWRITE_ENDPOINT) // 'https://appwrite.kingoftool.net/v1'
            .setProject(process.env.APPWRITE_PROJECT_ID) // '68f158230025f534f88a'
            .setJWT(token); // Quan tr·ªçng: set JWT ƒë·ªÉ x√°c th·ª±c

        const account = new Account(client);
        
        // Y√™u c·∫ßu Appwrite x√°c minh token v√† l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
        const user = await account.get();

        // G·∫Øn th√¥ng tin ng∆∞·ªùi d√πng v√†o request ƒë·ªÉ c√°c route sau c√≥ th·ªÉ s·ª≠ d·ª•ng
        req.user = user; 
        console.log("auth ok")
        next(); // Token h·ª£p l·ªá, cho ph√©p ƒëi ti·∫øp
    } catch (error) {
        console.error('L·ªói x√°c th·ª±c token:', error.message);
        return res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.' });
    }
}
